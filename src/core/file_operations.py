import subprocess
import tempfile
import os
from datetime import datetime


def write_to_mirrorlist(selected_mirrors):
    """
    Write selected mirrors to /etc/pacman.d/mirrorlist with proper formatting.
    Creates a backup of the existing mirrorlist first.
    """
    try:
        # Create timestamp for backup
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"/etc/pacman.d/mirrorlist.backup.{timestamp}"
        
        # Backup the existing mirrorlist
        print("Creating backup of current mirrorlist...")
        subprocess.run(["sudo", "cp", "/etc/pacman.d/mirrorlist", backup_path], check=True)
        print(f"Backup created: {backup_path}")

        # Create temporary file with new mirrorlist content
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.mirrorlist') as temp_file:
            temp_path = temp_file.name
            
            # Write header
            temp_file.write("##\n")
            temp_file.write("## Arch Linux repository mirrorlist\n")
            temp_file.write(f"## Generated by Arch Mirrorlist Manager on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            temp_file.write("##\n")
            temp_file.write("## Use 'pacman -Syy' to force pacman to refresh the package databases\n")
            temp_file.write("##\n\n")
            
            # Group mirrors by country
            mirrors_by_country = {}
            for mirror in selected_mirrors:
                country = mirror['country']
                if country not in mirrors_by_country:
                    mirrors_by_country[country] = []
                mirrors_by_country[country].append(mirror)
            
            # Write mirrors grouped by country
            for country, mirrors in mirrors_by_country.items():
                temp_file.write(f"## {country}\n")
                for mirror in mirrors:
                    temp_file.write(f"Server = {mirror['url']}\n")
                temp_file.write("\n")

        # Move the new mirrorlist to the correct location with root permissions
        print("Applying new mirrorlist...")
        subprocess.run(["sudo", "mv", temp_path, "/etc/pacman.d/mirrorlist"], check=True)
        
        # Set proper permissions
        subprocess.run(["sudo", "chmod", "644", "/etc/pacman.d/mirrorlist"], check=True)
        
        print("Mirrorlist updated successfully!")
        return True

    except subprocess.CalledProcessError as e:
        print(f"Command failed: {e}")
        # Clean up temp file if it exists
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.unlink(temp_path)
        raise Exception(f"Failed to update mirrorlist. Command failed: {e}")
    except Exception as e:
        print(f"Error writing to mirrorlist: {e}")
        # Clean up temp file if it exists
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.unlink(temp_path)
        raise


def backup_mirrorlist():
    """
    Create a backup of the current mirrorlist.
    """
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"/etc/pacman.d/mirrorlist.backup.{timestamp}"
        
        subprocess.run(["sudo", "cp", "/etc/pacman.d/mirrorlist", backup_path], check=True)
        print(f"Backup created: {backup_path}")
        return backup_path
        
    except Exception as e:
        print(f"Error creating backup: {e}")
        raise


def read_current_mirrorlist():
    """
    Read and return the current mirrorlist content.
    """
    try:
        with open("/etc/pacman.d/mirrorlist", "r") as f:
            return f.read()
    except Exception as e:
        print(f"Error reading mirrorlist: {e}")
        return None
